= sycl_ext_oneapi_fma_relu

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2022-2022 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues

or contact hugh 'dot' delaney 'at' codeplay 'dot' com.

== Dependencies

This extension is written against the SYCL 2020 revision 4 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.

For the `bfloat16` cases this extension depends on the following other SYCL
extensions:

* link:./sycl_ext_intel_bf16_conversion.asciidoc[
  sycl_ext_*_bf16_conversion]

For the `half` cases this extension requires the runtime aspect 
`sycl::aspect::fp16`.

== Contributors

* Hugh Delaney

== Status

This is a proposed extension specification, intended to gather community
feedback.  Interfaces defined in this specification may not be implemented yet
or may be in a preliminary state.  The specification itself may also change in
incompatible ways before it is finalized.  *Shipping software products should
not rely on APIs defined in this specification.*

[NOTE]
====
This extension is currently implemented in {dpcpp} only for GPU devices and
only when using the CUDA backend.  Attempting to use this extension in
kernels that run on other devices or backends may result in undefined behavior.
Be aware that the compiler is not able to issue a diagnostic to warn you if
this happens.
====


== Overview

This extension introduces the `fma_relu` function for datatypes `sycl::half`,
`bfloat16` and `bfloat16x2`. `bfloat16` refers to the bfloat16 class from 
the `sycl_ext_oneapi_bfloat16` extension. `bfloat16x2` has not yet been 
implemented as a class so this `fma_relu` extension uses `uint32_t` as a
storage type for `bfloat16x2`. This will be changed once the `bfloat16x2` 
class has been implemented. 

== Specification

```c++
namespace sycl::ext::oneapi::experimental {

// Available when T is sycl::half, uint16_t (bfloat16) or uint32_t (bfloat16x2)
template <typename T>
T fma_relu(T a, T b, T c);
}
```

`fma_relu` returns `a * b + c > 0 ? a * b + c : 0`. 

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_ONEAPI_FMA_RELU` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

If `fma_relu` is to be used with either the `bf16` or `bf16x2` datatypes, then
an implementation must additionally predefine the macro 
`SYCL_EXT_ONEAPI_BFLOAT16`, as detailed in 
link:./sycl_ext_intel_bf16_conversion.asciidoc[
  sycl_ext_*_bf16_conversion].


[%header,cols="1,5"]
|===
|Value
|Description

|1
|The APIs of this experimental extension are not versioned, so the
 feature-test macro always has this value.
|===

