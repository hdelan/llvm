= sycl_ext_oneapi_enqueue_custom_operation

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2024 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.


== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 8 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.


== Status

This is an experimental extension specification, intended to provide early
access to features and gather community feedback.  Interfaces defined in this
specification are implemented in {dpcpp}, but they are not finalized and may
change incompatibly in future versions of {dpcpp} without prior notice.
*Shipping software products should not rely on APIs defined in this
specification.*


== Backend support status

This extension is currently implemented in {dpcpp} only for GPU devices and
only when using the CUDA or HIP backends.  Attempting to use this extension in
kernels that run on other devices or backends may result in undefined
behavior.  Be aware that the compiler is not able to issue a diagnostic to
warn you if this happens.


== Overview

This extension is derived from an experimental AdaptiveCpp extension, which is
documented
https://github.com/sycl_ext_oneapi/sycl_ext_oneapi/blob/develop/doc/enqueue-custom-operation.md[here]._

The extension aims to integrate asynchronous interop work submitted through the
backend API with the asynchrony of the SYCL runtime DAG. As such it is required
that any interop calls used within `sycl_ext_oneapi_enqueue_custom_operation`
are asynchronous.

```c++
sycl::queue q;

q.submit([&](sycl::handler &cgh) {
    sycl::accessor acc{buf, cgh};

    cgh.sycl_ext_oneapi_enqueue_custom_operation([=](sycl::interop_handle &h) {
      // Can extract device pointers from accessors
      void *native_mem = h.get_native_mem<sycl::backend::hip>(acc);
      // Can extract stream (note: get_native_queue() may not be 
      // supported on CPU backends)
      hipStream_t stream = h.get_native_queue<sycl::backend::hip>();
      // Can extract HIP device (note: get_native_device() may not be
      // supported on CPU backends)
      int dev = h.get_native_device<sycl::backend::hip>();
      // Can enqueue arbitrary backend operations. This could also be a kernel
      // launch or call to a library that enqueues operations on the stream etc
      hipMemcpyAsync(target_ptr, native_mem, test_size * sizeof(int),
                      hipMemcpyDeviceToHost, stream);
    });
  });
q.wait();
```

Provided that the correct dependencies are handled in the SYCL runtime, there
is no need to do any further synchronization within the backend API in the user
submitted lambda.


== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_ONEAPI_ENQUEUE_CUSTOM_OPERATION` to one of the values defined
in the table below.  Applications can test for the existence of this macro to
determine if the implementation supports this feature, or applications can test
the macro's value to determine which of the extension's features the
implementation supports.

_And follow the text with a table like this *unless the extension is
"experimental"*.  Note that your table may have more than one row if it
has multiple versions._

[%header,cols="1,5"]
|===
|Value
|Description

|1
|The APIs of this experimental extension are not versioned, so the
 feature-test macro always has this value.
|===


=== Synchronization

The goal of `sycl_ext_oneapi_enqueue_custom_operation` is to integrate interop
work within the asynchronous SYCL DAG. As such, the user defined lambda must
only enqueue asynchronous work within the user lambda. Asynchronous work must
only be submitted to the native queue obtained from
`interop_handle::get_native_queue`.

A lambda submitted to `sycl_ext_oneapi_enqueue_custom_operation` may choose to
not wait on dependent events to complete, in order for asynchronous interop
work to be composed with asynchronous SYCL commands. This gives different
sychronization guarantees from normal SYCL `host_task`s.

In this example:

```
q.submit([&](sycl::handler &cgh) {
    cgh.depends_on(dep_event);
    cgh.sycl_ext_oneapi_enqueue_custom_operation([=](sycl::interop_handle &h) {
      printf("This will print before dep_event has completed.\n");
      hipStream_t stream = h.get_native_queue<sycl::backend::hip>();
      hipMemcpyAsync(target_ptr, native_mem, test_size * sizeof(int),
                      hipMemcpyDeviceToHost, stream);
    });
  });
q.wait()
```

The print statement may print before `dep_event` has completed. However, the
asynchronous memcpy submitted to the native queue obtained by
`interop_handle::get_native_queue` is guaranteed to have the correct
dependencies, and therefore will only start once its dependent events have
completed.

By contrast, when using a `host_task`, it is guaranteed that the print statment
will only happen once the host task's dependent events are observed to be
complete on the host.


=== Additions to handler class

This extension adds the following new member function to the SYCL `handler`
class:

```
class handler {
  template <typename Func>
  void sycl_ext_oneapi_enqueue_custom_operation(Func&& interopCallable);
};
```

`interopCallable` must be a callable which takes a `interop_handle` as its
first arg.


